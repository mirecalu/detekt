<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist>
    <ID>UndocumentedPublicClass:MenuEntryView.kt$MenuEntryView$rrr</ID>
  </Blacklist>
  <Whitelist>
    <ID>MaxLineLength:ConstructorParameterNaming.kt$io.gitlab.arturbosch.detekt.rules.naming.ConstructorParameterNaming.kt</ID>
    <ID>MaxLineLength:IteratorNotThrowingNoSuchElementException.kt$io.gitlab.arturbosch.detekt.rules.bugs.IteratorNotThrowingNoSuchElementException.kt</ID>
    <ID>MaxLineLength:ProtectedMemberInFinalClass.kt$io.gitlab.arturbosch.detekt.rules.style.ProtectedMemberInFinalClass.kt</ID>
    <ID>MaxLineLength:ThrowingExceptionInMain.kt$io.gitlab.arturbosch.detekt.rules.exceptions.ThrowingExceptionInMain.kt</ID>
    <ID>MaxLineLength:TooGenericExceptionThrown.kt$TooGenericExceptionThrown$private val exceptions: Set&lt;String&gt; = valueOrDefault(THROWN_EXCEPTIONS_PROPERTY, thrownExceptionDefaults).toHashSet()</ID>
    <ID>MaxLineLength:UnusedImports.kt$io.gitlab.arturbosch.detekt.rules.style.UnusedImports.kt</ID>
    <ID>MaxLineLength:UnusedPrivateMember.kt$io.gitlab.arturbosch.detekt.rules.style.UnusedPrivateMember.kt</ID>
    <ID>MaxLineLength:BaselineFacade.kt$BaselineFacade$val blackFiltered = whiteFiltered.filterNot { finding -&gt; listings.second.ids.contains(finding.baselineId) }</ID>
    <ID>MaxLineLength:ComplexityReportGenerator.kt$ComplexityReportGenerator.Factory$fun create(detektion: Detektion): ComplexityReportGenerator</ID>
    <ID>MaxLineLength:Config.kt$io.gitlab.arturbosch.detekt.api.Config.kt</ID>
    <ID>UndocumentedPublicClass:MenuEntryView.kt$MenuEntryView$rrr</ID>
  </Whitelist>
</SmellBaseline>
